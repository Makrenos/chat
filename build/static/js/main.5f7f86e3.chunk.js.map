{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","src","width","onClick","href","preventDefault","sendPacket","staySignedIn","React","TextInputAndButton","textInput","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f7f86e3.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket, MessageDto } from \"./chat\";\r\nimport { EventProducer } from \"./EventProducer\";\r\n\r\n\r\ninterface ProxyEventMap\r\n{\r\n\"login\": () => void;\r\n\"message\": ( channelId: string, message: MessageDto ) => void;\r\n\"conversation\": ( channelId: string ) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n    private ws: WebSocket;\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\r\n        this.ws.addEventListener( \"open\", () =>\r\n        {\r\n            \r\n        } );\r\n        this.ws.addEventListener( \"message\", e =>\r\n        {\r\n            let p = <IncomingPacket>JSON.parse( e.data );\r\n            switch ( p.type )\r\n            {\r\n            case \"error\":\r\n                alert( p.message );\r\n                break;\r\n            case \"login\":\r\n                this.inbox = p.inbox;\r\n                this.dispatch( \"login\" );\r\n                break;\r\n            case \"message\":\r\n                let cid = p.channelId;\r\n                this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\r\n                this.dispatch( \"message\", cid, p.message );\r\n                break;\r\n            case \"conversationAdded\":\r\n                this.inbox!.conversations.push( p.conversation );\r\n                this.dispatch( \"conversation\", p.conversation.channelId );\r\n                break;\r\n            }\r\n        } );\r\n    }\r\n\r\n    sendPacket( packet: OutgoingPacket )\r\n    {\r\n        this.ws.send( JSON.stringify( packet ) );\r\n    }\r\n\r\n    inbox: InboxDto | null = null;\r\n\r\n}\r\n\r\n\r\n\r\nexport var proxy = new Proxy();","export class EventProducer<M>\r\n{\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n\r\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object )\r\n    {\r\n        this.listeners.push( { type, listener, obj } );\r\n    }\r\n\r\n    removeEventListener<K extends keyof M>( type: K, listener: M[ K ] )\r\n    {\r\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );\r\n    }\r\n\r\n    protected dispatch<K extends keyof M>( type: K, ...args )\r\n    {\r\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\r\n            listener.listener.call( listener.obj, ...args );\r\n    }\r\n\r\n    removeAllEventListener( obj: Object )\r\n    {\r\n    if ( !obj )\r\n        throw new Error( \"Must specify object\" );\r\n    this.listeners = this.listeners.filter( x => x.obj !== obj );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './TextInput.css'\r\n\r\nexport interface TextInputOptions\r\n{\r\n    value?: string;\r\n    onChange?: ( value: string ) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>{\r\n    state = { value: this.props.value, focus: false };\r\n    render(){\r\n        let attrs = {} as any;\r\n        if ( this.props.autofocus )\r\n        attrs.autoFocus = true;\r\n        if ( this.props.onEnter )\r\n        attrs.onKeyDown = e =>\r\n        {\r\n        if ( e.keyCode === 13 )\r\n        this.props.onEnter!();\r\n        };\r\n        return (\r\n            <div className=\"text-input\">\r\n            <input { ...attrs } type={ this.props.type ?? \"text\" } value={ this.state.value }\r\n            onChange={ e =>\r\n            {\r\n            this.setState( { value: e.target.value } );\r\n            this.props.onChange?.( e.target.value );\r\n            } }\r\n            onBlur={ () => this.setState( { focus: false } ) }\r\n            onFocus={ () => this.setState( { focus: true } ) } />\r\n            <div className=\"focus-indicator\"></div>\r\n            <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\r\n            { this.props.placeholder }\r\n            </label>\r\n            </div> );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from './Proxy';\r\nimport './TextInput.css'\r\nimport { TextInput } from './TextInput';\r\n\r\ntype Base = { email: string, password: string };\r\ntype Register = { email: string, password: string, displayName: string, register: boolean };\r\nexport class Login extends React.Component<{}, Register>\r\n{\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    render()\r\n    \r\n    {\r\n        \r\n        if(this.state.email == \"JNH1DH\"){\r\n            this.setState( { displayName: \"Kovács László\" });\r\n        }\r\n        return (\r\n            \r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                { this.state.register &&\r\n                <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName }\r\n                onChange={ e => this.setState( { displayName: e } ) } onEnter={ () => this.onClick() } /> \r\n                }\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={ this.state.email } onChange={ e =>  this.setState( { email: e } ) } onEnter={ () => this.onClick() } autofocus={ true }/>\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={ this.state.password } onChange={ e => this.setState( { password: e } ) } onEnter={ () => this.onClick() }/>\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                    { this.state.register ? \"Register\" : \"Login\" }\r\n                </button>\r\n                <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n                    <a href=\"\" onClick={ e => { e.preventDefault(); this.setState( { register: !this.state.register } ); } }>\r\n                    { this.state.register ? \"Login\" : \"Register\" }\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n                \r\n            </div> \r\n        );\r\n        \r\n    }\r\n\r\n    onClick()\r\n    {\r\n        \r\n        if ( this.state.register )\r\n        proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password,\r\n        displayName: this.state.displayName, staySignedIn: false } );\r\n        else\r\n        proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false } );\r\n    }\r\n}","import { TextInputOptions, TextInput } from \"./TextInput\";\r\nimport React, { Component } from 'react';\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\nbuttonContent?: string;\r\nonClick?: ( text: string ) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    onClick()\r\n    {\r\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\n        this.textInput.current?.setState( { value: \"\" } );\r\n    }\r\n\r\n    render()\r\n    {\r\n        \r\n        return (\r\n            \r\n            <div className=\"text-input-and-button\">\r\n            <TextInput { ...this.props } ref={ this.textInput } onEnter={ () => this.onClick() } />\r\n            <button type=\"button\" onClick={ () => this.onClick() }>\r\n            { this.props.buttonContent }\r\n            </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport { proxy } from './Proxy';\r\n\r\nexport class ConversationCard extends Component<{conversation: ConversationDto,selected: boolean,onSelect: () => void}>\r\n{\r\nrender()\r\n    {\r\n    let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n    this.props.conversation.lastMessages[ this.props.conversation.lastMessages.length - 1 ] : null;\r\n\r\n    return (\r\n        <div className={ \"conversation-card\" + ( this.props.selected ? \" selected\" : \"\" ) }\r\n        onClick={ () => this.props.onSelect() }>\r\n        <div className=\"row\">\r\n        <span className=\"channel-name\">{ this.props.conversation.name }</span>\r\n        <span className=\"time\">\r\n        { lastMessage && new Date( lastMessage.timeStamp ).toLocaleDateString() }\r\n        </span>\r\n        </div>\r\n        <span className=\"last-message\">{ lastMessage?.content }</span>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n        if ( cid === this.props.conversation.channelId )\r\n            this.forceUpdate();\r\n        }, this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { InboxDto, ConversationDto } from './chat';\r\nimport { TextInputAndButton } from './TextInputAndButton';\r\nimport { proxy } from './Proxy';\r\nimport { ConversationCard } from './ConversationCard';\r\n\r\nexport class LeftPane extends Component<{inbox: InboxDto, selectedConversation: ConversationDto | undefined,onSelect: ( c: ConversationDto ) => void}>{\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"left-pane\">\r\n            <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n            <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n            buttonContent=\"Inv\"\r\n            onClick={ text => this.sendContactRequest( text ) } />\r\n            <div className=\"conversations\">\r\n            { this.props.inbox.conversations.map( x =>\r\n            <ConversationCard\r\n            key={ x.channelId }\r\n            conversation={ x }\r\n            selected={ x === this.props.selectedConversation }\r\n            onSelect={ () => this.props.onSelect( x ) } /> ) }\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n    sendContactRequest( email: string )\r\n    {\r\n    proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\r\n    return true;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n    proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\r\n    }\r\n    \r\n    componentWillUnmount()\r\n    {\r\n    proxy.removeAllEventListener( this );\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport { MessageDto } from './chat';\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\r\n            <div className=\"bubble\">\r\n            <span className=\"text\">{ this.props.message.content }</span>\r\n            <span className=\"time\">\r\n            { new Date( this.props.message.timeStamp ).toLocaleTimeString() }\r\n            </span>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport { proxy } from './Proxy';\r\nimport { TextInputAndButton } from './TextInputAndButton';\r\nimport { MessageCard } from './MessageCard';\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n        if ( cid === this.props.conversation?.channelId )\r\n        this.forceUpdate();\r\n        }, this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n\r\n    onSend( text: string )\r\n    {\r\n        let neptun = \"J: \";\r\n        text = neptun + text;\r\n        proxy.sendPacket( { type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: text } );\r\n        return true;\r\n    }\r\n\r\nrender()\r\n    {\r\n    return (\r\n    <div className=\"right-pane column\">\r\n    { this.props.conversation &&\r\n    <>\r\n    <div className=\"conversation-header row\">\r\n<button type=\"button\" className=\"only-narrow\"\r\nonClick={ () => this.props.onBack() }>Back</button>\r\n<p>{ this.props.conversation?.name }</p>\r\n</div>\r\n    <div className=\"messages\">\r\n    { this.props.conversation?.lastMessages.map( x =>\r\n    <MessageCard key={ x.id } message={ x }\r\n    own={ x.senderId === proxy.inbox?.user.id } /> ) }\r\n    </div>\r\n    <div className=\"send-message row\">\r\n    <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n    buttonContent=\"Send\" onClick={ x => this.onSend( x ) } />\r\n    </div>\r\n    </>\r\n    }\r\n    </div>\r\n    );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport { proxy } from './Proxy';\r\nimport { LeftPane } from './LeftPane';\r\nimport { RightPane } from './RightPane';\r\n\r\nexport class Main extends Component\r\n{\r\nstate = { selectedConversation: undefined as ( ConversationDto | undefined ) };\r\nrender()\r\n{\r\n    let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n    return (\r\n    <div className={ className }>\r\n    <LeftPane\r\n    inbox={ proxy.inbox! }\r\n    selectedConversation={ this.state.selectedConversation }\r\n    onSelect={ c => this.setState( { selectedConversation: c } ) } />\r\n    <RightPane conversation={ this.state.selectedConversation }\r\n    onBack={ () => this.setState( { selectedConversation: undefined } ) } />\r\n    </div>\r\n    );\r\n}\r\n}","import React, { Component } from 'react';\nimport { Login } from './Login'\nimport { Main } from './Main';\nimport { proxy } from './Proxy';\n\nexport default class App extends Component\n{\n  \n  state = { register: true };\n  \n\nrender()\n{\n  proxy.addEventListener(\"login\", () => this.setState( { register: false }), this);\n  return (\n    <div className=\"app\">\n    { this.state.register ? <Login /> :  <Main /> }\n    </div>\n    );\n}\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}